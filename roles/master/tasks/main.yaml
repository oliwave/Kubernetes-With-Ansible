- name: install kubectl
  apt:
    name: kubectl=1.21.0-00
    state: present
    force: yes

- name: hold kubelet kubeadm kubectl
  command: apt-mark hold kubelet kubeadm kubectl

- name: create /etc/kubernetes/manifests/ for static pod and /etc/haproxy/ for HAProxy
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/kubernetes/manifests
    - /etc/haproxy

- name: copy haproxy.cfg, haproxy.yaml and Keepalived.yaml to remote
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: no
  loop:
    - { src: haproxy.cfg, dest: /etc/haproxy }
    - { src: haproxy.yaml, dest: /etc/kubernetes/manifests }

- name: copy leader-ka.yaml to leader master nodes
  copy:
    src: leader-ka.yaml
    dest: /etc/kubernetes/manifests
    remote_src: no
  run_once: yes

- name: copy backup-ka.yaml to backup master nodes
  copy:
    src: backup-ka.yaml
    dest: /etc/kubernetes/manifests
    remote_src: no
  delegate_to: "{{ item }}"
  loop: "{{ groups.backup }}"

- name: Set up Kubeadm Master Configuration
  shell:
    cmd: |
      cat <<EOF > kubeadm-config.yaml
      apiVersion: kubeadm.k8s.io/v1beta2
      kind: ClusterConfiguration
      kubernetesVersion: v1.21.0
      controlPlaneEndpoint: "10.52.52.78:8443"
      networking:
        podSubnet: "{{cidr_v}}"
      EOF
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Get user name
  become: no
  command: echo $USER
  register: user

- name: initialize the cluster
  command: "kubeadm init --config=kubeadm-config.yaml --upload-certs"
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"
  register: join_command

- name: create .kube directory
  become: no
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ user.stdout }}/.kube/config"
    remote_src: yes
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Use kube config as a regular user
  shell: chown $(id -u):$(id -g) /home/{{ user.stdout }}/.kube/config
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: install network add-on (CNI)
  become: no
  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Create certificate key for join control plane
  shell: kubeadm init phase upload-certs --upload-certs | tail -n1
  register: certificate_key
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Generate node join command
  shell: kubeadm token create --print-join-command  
  register: join_command
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Copy worker join command to local file
  become: no
  local_action: copy content="{{ join_command.results[0].stdout }}" dest="./worker-join-command"
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"
  
- name: Copy master join command to local file  
  become: no
  local_action: copy content="{{ join_command.results[0].stdout }} --control-plane --certificate-key {{ certificate_key.results[0].stdout }} --ignore-preflight-errors=all" dest="./master-join-command"
  delegate_to: "{{ item }}"
  loop: "{{ groups.leader }}"

- name: Copy the master join command to server location
  copy: 
    src: master-join-command 
    dest: /tmp/join-command.sh 
    mode: 0777
  delegate_to: "{{ item }}"
  loop: "{{ groups.backup }}"

  #- name: kubeadm reset backup 
  #import_playbook: reset.yaml
  #vars:
  #  hosts: backup    

- name: Join the backup to control plane
  command: sh /tmp/join-command.sh
  delegate_to: "{{ item }}"
  loop: "{{ groups.backup }}"

- name: copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ user.stdout }}/.kube/config"
    remote_src: yes
  delegate_to: "{{ item }}"
  loop: "{{ groups.backup }}"

- name: Use kube config as a regular user
  shell: chown $(id -u):$(id -g) /home/{{ user.stdout }}/.kube/config
  delegate_to: "{{ item }}"
  loop: "{{ groups.backup }}"
